#version 450
#extension GL_GOOGLE_include_directive : require
#include "structs.glsl"

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform writeonly image2D OutputTex;
layout(set = 0, binding = 1) uniform Camera { CameraView camera; };
layout(std430, set = 0, binding = 2) buffer pathStates { vec4 states[]; };
layout(std430, set = 0, binding = 3) buffer pathOrigins { vec4 origins[]; };
layout(std430, set = 0, binding = 4) buffer pathDirections { vec4 directions[]; };
layout(set = 0, binding = 5, rgba32f) uniform image2D AccTex;

layout(std430, set = 1, binding = 0) buffer readonly primIndices { uint prim_indices[]; };
layout(std430, set = 1, binding = 1) buffer readonly meshBVHNodes { BVHNode bvh_nodes[]; };
layout(std430, set = 1, binding = 2) buffer readonly meshMBVHNodes { MBVHNode mbvh_nodes[]; };
layout(std430, set = 1, binding = 3) buffer readonly meshTriangles { RTTriangle rt_triangles[]; };

layout(std430, set = 2, binding = 0) buffer readonly instanceDescriptors { InstanceDescriptor instances[]; };
layout(std430, set = 2, binding = 1) buffer readonly topIndices { uint instance_indices[]; };
layout(std430, set = 2, binding = 2) buffer readonly topBVHNodes { BVHNode top_bvh_nodes[]; };
layout(std430, set = 2, binding = 3) buffer readonly topMBVHNodes { MBVHNode top_mbvh_nodes[]; };
layout(std430, set = 2, binding = 4) buffer readonly Materials { Material materials[]; };

#define PATH_ID floatBitsToInt(O.w)
#define INST_ID floatBitsToInt(S.x)
#define TRI_ID floatBitsToInt(S.y)
#define T_VAL S.z
#define HIT_U (float(floatBitsToUint(S.w) & 65535) * (1.0f / 65535.0f))
#define HIT_V (float(floatBitsToUint(S.w) >> 16) * (1.0f / 65535.0f))
#define MAT_ID rt_triangles[TRI_ID].mat_id

void main()
{
    const uint job_id = gl_GlobalInvocationID.x;
    const ivec2 size = imageSize(AccTex);
    if (job_id >= uint(size.x * size.y)) {
        return;
    }
    
    const vec4 S = states[job_id];
    const vec4 O = origins[job_id];
    if (INST_ID < 0) {
        if (camera.sample_count == 0) {
            imageStore(AccTex, ivec2(PATH_ID % camera.width, PATH_ID / camera.width), vec4(0.0));
        }
        return;
    }

    const vec4 D = directions[job_id];
    
    const float u = HIT_U;
    const float v = HIT_V;
    const float w = 1.0 - u - v;

    vec3 gN = rt_triangles[TRI_ID].gn;
    vec3 N = w * rt_triangles[TRI_ID].n0 + u * rt_triangles[TRI_ID].n1 + v * rt_triangles[TRI_ID].n2;

    gN = normalize((instances[INST_ID].normal * vec4(gN, 0.0)).xyz);
    N = normalize((instances[INST_ID].normal * vec4(N, 0.0)).xyz);

    vec4 color = materials[MAT_ID].color * abs(dot(D.xyz, N));
    imageStore(AccTex, ivec2(PATH_ID % camera.width, PATH_ID / camera.width), color);
}