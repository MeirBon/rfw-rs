#version 450
#extension GL_GOOGLE_include_directive : require

#include "structs.glsl"
#include "utils.glsl"
#include "random.glsl"

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform writeonly image2D OutputTex;
layout(std430, set = 0, binding = 1) buffer Camera { CameraView camera; };
layout(std430, set = 0, binding = 2) buffer pathStates { vec4 states[]; };
layout(std430, set = 0, binding = 3) buffer pathOrigins { vec4 origins[]; };
layout(std430, set = 0, binding = 4) buffer pathDirections { vec4 directions[]; };
layout(std430, set = 0, binding = 5) buffer pathThroughputs { vec4 throughputs[]; };
layout(std430, set = 0, binding = 6) buffer accBuffer { vec4 acPixels[]; };
layout(std430, set = 0, binding = 7) buffer shadowContributions { PotentialContribution potContributions[]; };

layout(std430, set = 1, binding = 0) buffer readonly primIndices { uint prim_indices[]; };
layout(std430, set = 1, binding = 1) buffer readonly meshBVHNodes { BVHNode bvh_nodes[]; };
layout(std430, set = 1, binding = 2) buffer readonly meshMBVHNodes { MBVHNode mbvh_nodes[]; };
layout(std140, set = 1, binding = 3) buffer readonly meshTriangles { RTTriangle rt_triangles[]; };

layout(std430, set = 2, binding = 0) buffer readonly instanceDescriptors { InstanceDescriptor instances[]; };
layout(std430, set = 2, binding = 1) buffer readonly topIndices { uint instance_indices[]; };
layout(std430, set = 2, binding = 2) buffer readonly topBVHNodes { BVHNode top_bvh_nodes[]; };
layout(std430, set = 2, binding = 3) buffer readonly topMBVHNodes { MBVHNode top_mbvh_nodes[]; };
layout(std430, set = 2, binding = 4) buffer readonly Materials { Material materials[]; };
layout(set = 2, binding = 5) uniform texture2DArray matTextures;
layout(set = 2, binding = 6) uniform sampler matTexSampler;

layout(std430, set = 3, binding = 0) buffer readonly PointLights { PointLight pointLights[]; };
layout(std430, set = 3, binding = 1) buffer readonly SpotLights { SpotLight spotLights[]; };
layout(std430, set = 3, binding = 2) buffer readonly AreaLights { AreaLight areaLights[]; };
layout(std430, set = 3, binding = 3) buffer readonly DirectionalLights { DirectionalLight directionalLights[]; };

#define MIPLEVELCOUNT 5

#define PATH_ID floatBitsToInt(O.w)
#define INST_ID floatBitsToInt(S.x)
#define TRI_ID floatBitsToInt(S.y)
#define T_VAL S.z
#define HIT_U (float(floatBitsToUint(S.w) & 65535) * (1.0f / 65535.0f))
#define HIT_V (float(floatBitsToUint(S.w) >> 16) * (1.0f / 65535.0f))
#define MAT_ID rt_triangles[TRI_ID].mat_id

#define AREALIGHTCOUNT camera.point_light_count
#define POINTLIGHTCOUNT camera.area_light_count
#define SPOTLIGHTCOUNT camera.spot_light_count
#define DIRECTIONALLIGHTCOUNT camera.directional_light_count

vec4 fetchTexel(const vec2 texCoord, const int texturdId, const float LOD);
vec4 fetchTexelTrilinear(const float lambda, const vec2 texCoord, const int textureId);

void main()
{
    uint job_id = gl_GlobalInvocationID.x;
    if (job_id >= camera.path_count) {
        return;
    }

    const uint offset = camera.width * camera.height;
    const uint shadeBufferIndex = camera.path_length % 2;
    const uint nextBufferIndex = 1 - shadeBufferIndex;

    job_id = job_id + shadeBufferIndex * offset;

    const vec4 S = states[job_id];
    const vec4 O = origins[job_id];
    vec3 throughput = camera.path_length == 0 ? vec3(1) : throughputs[job_id].xyz;

    if (INST_ID < 0) { // Did not hit anything
        return;
    }

    vec4 color = materials[MAT_ID].color;
    const uint flags = materials[MAT_ID].flags;
    
    // If material contains an emissive map, defer returning
    if (any(greaterThan(color.xyz, vec3(1.0f))) && !HAS_EMISSIVE_MAP(flags)) { // Hit a light
        acPixels[PATH_ID] += vec4(color.xyz * throughput, 0);
        return;
    }

    const uint sampleId = PATH_ID / (offset) + camera.sample_count;
    uint seed = wang_hash(PATH_ID * 16789 + sampleId * 1791 + camera.path_length * 720898027);

    const vec4 D = directions[job_id];
    const float u = HIT_U;
    const float v = HIT_V;
    const float w = 1.0 - u - v;

    vec3 gN = rt_triangles[TRI_ID].gn;
    vec3 N = w * rt_triangles[TRI_ID].n0 + u * rt_triangles[TRI_ID].n1 + v * rt_triangles[TRI_ID].n2;
    vec4 T = w * rt_triangles[TRI_ID].T0 + u * rt_triangles[TRI_ID].T1 + v * rt_triangles[TRI_ID].T2;

    gN = normalize((instances[INST_ID].normal * vec4(gN, 0.0)).xyz);
    N = normalize((instances[INST_ID].normal * vec4(N, 0.0)).xyz);
    T = vec4(normalize((instances[INST_ID].normal * vec4(T.xyz, 0.0)).xyz), T.w);
    const vec3 B = cross(N, T.xyz) * T.w;

    if (HAS_DIFFUSE_MAP(flags) || HAS_NORMAL_MAP(flags) || HAS_ROUGHNESS_MAP(flags) || HAS_METALLIC_MAP(flags) || HAS_EMISSIVE_MAP(flags) || HAS_SHEEN_MAP(flags))
    {
        const float lambda = sqrt(rt_triangles[TRI_ID].lod) + log2(camera.spread_angle * (1.0 / abs(dot(D.xyz, N.xyz))));
        const float tu = w * rt_triangles[TRI_ID].tu0 + u * rt_triangles[TRI_ID].tu1 + v * rt_triangles[TRI_ID].tu2;
        const float tv = w * rt_triangles[TRI_ID].tv0 + u * rt_triangles[TRI_ID].tv1 + v * rt_triangles[TRI_ID].tv2;

        // Retrieve emissiveness first
        if (HAS_EMISSIVE_MAP(flags)) {
            color = fetchTexelTrilinear(lambda, vec2(tu, tv), materials[MAT_ID].emissive_map);
            acPixels[PATH_ID] += vec4(color.xyz * throughput, 0);
            return;
        }

        if (HAS_DIFFUSE_MAP(flags)) {
            color *= fetchTexelTrilinear(lambda, vec2(tu, tv), materials[MAT_ID].diffuse_map);
        }

        if (HAS_NORMAL_MAP(flags)) {
            N = normalize(mat3(T.xyz, B.xyz, N.xyz) * ((fetchTexel(vec2(tu, tv), materials[MAT_ID].normal_map, int(lambda)).xyz - 0.5) * 2.0));
        }
    }

    const bool backFacing = dot(D.xyz, gN) >= 0.0f;
    if (backFacing) {
        N = N * -1.0f;
    }

    const vec3 P = O.xyz + T_VAL * D.xyz;
    const vec3 R = normalize(tangent_to_world(sample_hemisphere(randf(seed), randf(seed)), N.xyz, T.xyz, B.xyz));
    const vec3 bsdf = color.xyz * (1.0f / 3.14159265359f);

    const float n_dot_r = abs(dot(N, R));
    const float pdf = n_dot_r * (1.0f / 3.14159265359f);
    throughput = throughput * bsdf / pdf * n_dot_r / (1.0f * 3.14159265359f);
    if (any(lessThan(throughput, vec3(0.0f)))) {
        return;
    }

    // Prevent any nans
    throughput = max(throughput, vec3(0.0f));

    // Get compacted index for extension ray
    const int ext_id = atomicAdd(camera.extensionId, 1) + int(nextBufferIndex * offset);

    origins[ext_id] = vec4(P.xyz + R.xyz * 1e-4f, intBitsToFloat(PATH_ID));
    directions[ext_id] = vec4(R, D.w);
    throughputs[ext_id] = vec4(throughput, 0);
}

vec4 fetchTexel(const vec2 texCoord, const int textureId, const float LOD)
{
    return textureLod(sampler2DArray(matTextures, matTexSampler), vec3(texCoord, textureId), LOD).rgba;
}

vec4 fetchTexelTrilinear(const float lambda, const vec2 texCoord, const int textureId)
{
    const int level0 = min(MIPLEVELCOUNT - 1, int(lambda));
    const int level1 = min(MIPLEVELCOUNT - 1, level0 + 1);
    const float f = lambda - floor(lambda);
    const vec4 p0 = fetchTexel(texCoord, textureId, level0);
    const vec4 p1 = fetchTexel(texCoord, textureId, level1);
    return (1.0 - f) * p0 + f * p1;
}

float PotentialAreaLightContribution(const int idx, const vec3 O, const vec3 N, const vec3 I, const vec3 bary)
{
    const vec3 LN = areaLights[idx].normal;
    vec3 L = I;
    if (bary.x >= 0)
    {
        const vec3 V0 = areaLights[idx].vertex0;
        const vec3 V1 = areaLights[idx].vertex1;
        const vec3 V2 = areaLights[idx].vertex2;
        L = bary.x * V0 + bary.y * V1 + bary.z * V2;
    }
    L = L - O;
    const float att = 1.0f / dot(L, L);
    L = normalize(L);
    const float LNdotL = max(0.0f, -dot(LN, L));
    const float NdotL = max(0.0f, dot(N, L));
    return areaLights[idx].energy * LNdotL * NdotL * att;
}

float PotentialPointLightContribution(const int idx, const vec3 I, const vec3 N)
{
    const PointLight light = pointLights[idx];
    const vec3 L = light.position - I;
    const float NdotL = max(0.0f, dot(N, L));
    const float att = 1.0f / dot(L, L);
    return light.energy * NdotL * att;
}

float PotentialSpotLightContribution(const int idx, const vec3 I, const vec3 N)
{
    const SpotLight light = spotLights[idx];
    vec3 L = light.position - I;
    const float att = 1.0f / dot(L, L);
    L = normalize(L);
    const float d = (-dot(L, light.direction) - light.cos_outer) / (light.cos_inner - light.cos_outer);
    const float NdotL = max(0.0f, dot(N, L));
    const float LNdotL = clamp(d, 0.0f, 1.0f);
    return light.energy * LNdotL * NdotL * att;
}

float PotentialDirectionalLightContribution(const int idx, const vec3 I, const vec3 N)
{
    const DirectionalLight light = directionalLights[idx];
    const float LNdotL = -dot(light.direction, N);
    return light.energy * LNdotL;
}

float CalculateLightPDF(const vec3 D, const float t, const float lightArea, const vec3 lightNormal)
{
    return (t * t) / (-dot(D, lightNormal) * lightArea);
}

float LightPickProb(const int idx, const vec3 O, const vec3 N, const vec3 I)
{
    const uint lightCount = (AREALIGHTCOUNT + POINTLIGHTCOUNT + SPOTLIGHTCOUNT + DIRECTIONALLIGHTCOUNT);

#if ISLIGHTS
    if (lightCount < MAXISLIGHTS)
    {
        // for implicit connections; calculates the chance that the light would have been explicitly selected
        float potential[MAXISLIGHTS];
        float sum = 0;
        for (int i = 0; i < AREALIGHTCOUNT; i++)
        {
            const float c = max(0.0f, PotentialAreaLightContribution(i, O, N, I, vec3(-1)));
            potential[i] = c;
            sum += c;
        }
        for (int i = 0; i < POINTLIGHTCOUNT; i++)
        {
            const float c = max(0.0f, PotentialPointLightContribution(i, O, N));
            sum += c;
        }
        for (int i = 0; i < SPOTLIGHTCOUNT; i++)
        {
            const float c = max(0.0f, PotentialSpotLightContribution(i, O, N));
            sum += c;
        }
        for (int i = 0; i < DIRECTIONALLIGHTCOUNT; i++)
        {
            const float c = max(0.0f, PotentialDirectionalLightContribution(i, O, N));
            sum += c;
        }
        if (sum <= 0)
        return 0;// no potential lights found
        return potential[idx] / sum;
    }
#endif
    return 1.0f / (AREALIGHTCOUNT + POINTLIGHTCOUNT + SPOTLIGHTCOUNT + DIRECTIONALLIGHTCOUNT);
}

// https://pharr.org/matt/blog/2019/02/27/triangle-sampling-1.html
vec3 RandomBarycentrics(const float r0)
{
    const uint uf = uint(r0 * 4294967295u);
    vec2 A = vec2(1.0f, 0.0f);
    vec2 B = vec2(0.0f, 1.0f);
    vec2 C = vec2(0.0f, 0.0f);

    for (int i = 0; i < 16; ++i)
    {
        const int d = int((uf >> (2u * (15u - i))) & 0x3u);
        vec2 An, Bn, Cn;
        switch (d)
        {
            case 0:
            An = (B + C) * 0.5f;
            Bn = (A + C) * 0.5f;
            Cn = (A + B) * 0.5f;
            break;
            case 1:
            An = A;
            Bn = (A + B) * 0.5f;
            Cn = (A + C) * 0.5f;
            break;
            case 2:
            An = (B + A) * 0.5f;
            Bn = B;
            Cn = (B + C) * 0.5f;
            break;
            case 3:
            An = (C + A) * 0.5f;
            Bn = (C + B) * 0.5f;
            Cn = C;
            break;
        }
        A = An;
        B = Bn;
        C = Cn;
    }
    const vec2 r = (A + B + C) * 0.3333333f;
    return vec3(r.x, r.y, 1 - r.x - r.y);
}

vec3 RandomPointOnLight(float r0, float r1, const vec3 I, const vec3 N, inout float pickProb, inout float lightPdf, inout vec3 lightColor)
{
    const uint lightCount = AREALIGHTCOUNT + POINTLIGHTCOUNT + SPOTLIGHTCOUNT + DIRECTIONALLIGHTCOUNT;
    // predetermine the barycentrics for any area light we sample
    const vec3 bary = RandomBarycentrics(r0);
    int lightIdx = 0;
#if ISLIGHTS
    if (lightCount < MAXISLIGHTS)
    {
        // importance sampling of lights, pickProb is per-light probability
        float potential[MAXISLIGHTS];
        float sum = 0;
        float total = 0;
        int lights = 0;
        for (int i = 0; i < AREALIGHTCOUNT; i++)
        {
            float c = PotentialAreaLightContribution(i, I, N, vec3(0), bary);
            potential[lights++] = c;
            sum += c;
        }
        for (int i = 0; i < POINTLIGHTCOUNT; i++)
        {
            float c = PotentialPointLightContribution(i, I, N);
            potential[lights++] = c;
            sum += c;
        }
        for (int i = 0; i < SPOTLIGHTCOUNT; i++)
        {
            float c = PotentialSpotLightContribution(i, I, N);
            potential[lights++] = c;
            sum += c;
        }
        for (int i = 0; i < DIRECTIONALLIGHTCOUNT; i++)
        {
            float c = PotentialDirectionalLightContribution(i, I, N);
            potential[lights++] = c;
            sum += c;
        }
        if (sum <= 0)// no potential lights found
        {
            lightPdf = 0;
            return vec3(1 /* light direction; don't return 0 or nan, this will be slow */);
        }
        r1 *= sum;
        for (int i = 0; i < lights; i++)
        {
            total += potential[i];
            if (total >= r1)
            {
                lightIdx = i;
                break;
            }
        }
        pickProb = potential[lightIdx] / sum;
    }
    else
    {
#else
        // uniform random sampling of lights, pickProb is simply 1.0 / lightCount
        pickProb = 1.0f / lightCount;
        lightIdx = int(r0 * lightCount);
        r0 = (r0 - float(lightIdx) * (1.0f / float(lightCount))) * float(lightCount);
#endif
#if ISLIGHTS
    }
#endif
    lightIdx = clamp(lightIdx, 0, int(lightCount) - 1);
    if (lightIdx < AREALIGHTCOUNT)
    {
        // pick an area light
        const AreaLight light = areaLights[lightIdx];
        const vec3 V0 = light.vertex0;// vertex0
        const vec3 V1 = light.vertex1;// vertex1
        const vec3 V2 = light.vertex2;// vertex2
        lightColor = light.radiance.xyz;// radiance
        const vec3 LN = light.normal;// N
        const vec3 P = bary.x * V0.xyz + bary.y * V1.xyz + bary.z * V2.xyz;
        vec3 L = I - P;// reversed: from light to intersection point
        const float sqDist = dot(L, L);
        L = normalize(L);
        const float LNdotL = dot(L, LN.xyz);
        const float reciSolidAngle = sqDist / (light.energy* LNdotL);
        lightPdf = (LNdotL > 0 && dot(L, N) < 0) ? (reciSolidAngle * (1.0f / length(light.radiance.xyz))) : 0;
        return P;
    }

    if (lightIdx < (AREALIGHTCOUNT + POINTLIGHTCOUNT))
    {
        // pick a pointlight
        const PointLight light = pointLights[lightIdx - AREALIGHTCOUNT];
        lightColor = light.radiance.xyz;// radiance
        const vec3 L = I - light.position;// reversed
        const float sqDist = dot(L, L);
        lightPdf = dot(L, N) < 0 ? (sqDist / light.energy) : 0;
        return light.position;
    }

    if (lightIdx < (AREALIGHTCOUNT + POINTLIGHTCOUNT + SPOTLIGHTCOUNT))
    {
        // pick a spotlight
        const SpotLight light = spotLights[lightIdx - (AREALIGHTCOUNT + POINTLIGHTCOUNT)];
        const vec3 P = light.position; // position + cos_inner
        const vec3 E = light.radiance; // radiance + cos_outer
        const vec3 D = light.direction; // direction
        const vec3 pos = P.xyz;
        vec3 L = I - P.xyz;
        const float sqDist = dot(L, L);
        L = normalize(L);
        const float d = max(0.0f, dot(L, D.xyz) - light.cos_outer) / (light.cos_inner - light.cos_outer);
        const float LNdotL = min(1.0f, d);
        lightPdf = (LNdotL > 0 && dot(L, N) < 0) ? (sqDist / (LNdotL * light.energy)) : 0;
        lightColor = E.xyz;
        return pos;
    }

    // pick a directional light
    const DirectionalLight light = directionalLights[lightIdx - (AREALIGHTCOUNT + POINTLIGHTCOUNT + SPOTLIGHTCOUNT)];
    const vec3 L = light.direction;// direction
    lightColor = light.radiance.xyz;// radiance
    const float NdotL = dot(L.xyz, N);
    lightPdf = NdotL < 0 ? (1 * (1.0f / light.energy)) : 0;
    return I - 1000.0f * L.xyz;
}