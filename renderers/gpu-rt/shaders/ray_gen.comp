#version 450
#extension GL_GOOGLE_include_directive : require

#include "structs.glsl"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform writeonly image2D OutputTex;
layout(set = 0, binding = 1) uniform Camera {
    CameraView camera;
};
layout(set = 0, binding = 2) buffer readonly pathStates { vec4 states[]; };
layout(set = 0, binding = 3) buffer writeonly pathOrigins { vec4 origins[]; };
layout(set = 0, binding = 4) buffer writeonly pathDirections { vec4 directions[]; };
layout(set = 0, binding = 5) buffer readonly bvhBuffers

void main() {
    const ivec2 pixel_id = ivec2(gl_GlobalInvocationID.xy);
    const ivec2 size = imageSize(OutputTex);
    if (pixel_id.x >= size.x || pixel_id.y > size.y) {
        return;
    }

    const int path_id = pixel_id.x + pixel_id.y * size.x;

    const float u = pixel_id.x * camera.inv_width;
    const float v = pixel_id.y * camera.inv_height;

    const vec3 point_on_pixel = camera.p1.xyz + u * camera.right.xyz + v * camera.up.xyz;
    const vec3 direction = normalize(point_on_pixel - camera.position.xyz);

    origins[path_id] = vec4(camera.position.xyz, intBitsToFloat(path_id));
    directions[path_id] = vec4(direction, 0.0);

    imageStore(OutputTex, pixel_id, vec4(direction, 1.0));
}