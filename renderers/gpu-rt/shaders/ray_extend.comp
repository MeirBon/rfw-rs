#version 450
#extension GL_GOOGLE_include_directive : require

#include "structs.glsl"
#include "intersection.glsl"
#include "bindings.glsl"

#define USE_MBVH 1
layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = I_OUTPUT, rgba32f) uniform writeonly image2D OutputTex;
layout(std430, set = 0, binding = I_CAMERA) buffer Camera {
    CameraView camera;
    int blueNoise[];
};
layout(std430, set = 0, binding = I_STATES) buffer pathStates { PathState states[]; };
layout(std430, set = 0, binding = I_ACC_BUF) buffer accBuffer { vec4 acPixels[]; };

layout(std430, set = 1, binding = ME_PRIM) buffer readonly primIndices { uint prim_indices[]; };
layout(std430, set = 1, binding = ME_BVH) buffer readonly meshBVHNodes { BVHNode bvh_nodes[]; };
layout(std430, set = 1, binding = ME_MBVH) buffer readonly meshMBVHNodes { MBVHNode mbvh_nodes[]; };
layout(std140, set = 1, binding = ME_TRI) buffer readonly meshTriangles { RTTriangle rt_triangles[]; };

layout(std430, set = 2, binding = T_INST) buffer readonly instanceDescriptors { InstanceDescriptor instances[]; };
layout(std430, set = 2, binding = T_INST_ID) buffer readonly topIndices { uint instance_indices[]; };
layout(std430, set = 2, binding = T_BVH) buffer readonly topBVHNodes { BVHNode top_bvh_nodes[]; };
layout(std430, set = 2, binding = T_MBVH) buffer readonly topMBVHNodes { MBVHNode top_mbvh_nodes[]; };

int intersect_bvh(const vec3 origin, const vec3 direction, uint bvh_offset, uint triangle_offset, uint prim_offset, float t_min, inout float t, inout vec2 uv)
{
    uint hit_stack[64];
    hit_stack[0] = 0;
    int stack_ptr = 0;
    int hit = -1;

    const vec3 dir_inverse = 1.0 / direction;
    while (stack_ptr >= 0) {
        const uint node_index = hit_stack[stack_ptr] + bvh_offset;
        stack_ptr = stack_ptr - 1;

        const int count = bvh_nodes[node_index].count;
        const int left_first = bvh_nodes[node_index].left_first;

        if (count >= 0) { // Leaf node
            for (int i = 0; i < count; i++)
            {
                uint prim_id = triangle_offset + prim_indices[left_first + i + prim_offset];
                if (intersect(rt_triangles[prim_id], origin, direction, t_min, t, uv)) {
                    hit = int(prim_id);
                }
            }
        } else if (left_first >= 0) { // Regular node
            float _ltmin, _ltmax;
            float _rtmin, _rtmax;
            bool hit_left = intersect_node(bvh_nodes[left_first + bvh_offset], origin, dir_inverse, t, _rtmin, _rtmax);
            bool hit_right = intersect_node(bvh_nodes[left_first + bvh_offset + 1], origin, dir_inverse, t, _rtmin, _rtmax);

            if (hit_left && hit_right) {
                if (_ltmin < _rtmin) {
                    stack_ptr += 1;
                    hit_stack[stack_ptr] = left_first + 1;
                    stack_ptr += 1;
                    hit_stack[stack_ptr] = left_first;
                } else {
                    stack_ptr += 1;
                    hit_stack[stack_ptr] = left_first;
                    stack_ptr += 1;
                    hit_stack[stack_ptr] = left_first + 1;
                }
            } else if (hit_left) {
                stack_ptr += 1;
                hit_stack[stack_ptr] = left_first;
            } else if (hit_right) {
                stack_ptr += 1;
                hit_stack[stack_ptr] = left_first + 1;
            }
        }
    }

    return hit;
}

int intersect_mbvh(const vec3 origin, const vec3 direction, uint bvh_offset, uint triangle_offset, uint prim_offset, float t_min, inout float t, inout vec2 uv)
{
    MBVHTraversal hit_stack[32];
    int stack_ptr = -1;
    int hit = -1;

    const vec3 dir_inverse = 1.0 / direction;

    bvec4 result;
    vec4 index;

    if (!intersect_mnode(mbvh_nodes[bvh_offset], origin, dir_inverse, t, index, result))
    return hit;
    for (int i = 3; i >= 0; i--) {
        const int idx = floatBitsToInt(index[i]) & 3;
        if (result[idx] && mbvh_nodes[bvh_offset].children[idx] >= 0) {
            stack_ptr = stack_ptr + 1;
            hit_stack[stack_ptr].left_first = mbvh_nodes[bvh_offset].children[idx];
            hit_stack[stack_ptr].count = mbvh_nodes[bvh_offset].counts[idx];
        }
    }

    while (stack_ptr >= 0) {
        const int left_first = hit_stack[stack_ptr].left_first;
        const int count = hit_stack[stack_ptr].count;
        stack_ptr -= 1;

        if (count >= 0) { // Leaf node
            for (int i = 0; i < count; i++) {
                if (intersect(rt_triangles[triangle_offset + prim_indices[left_first + i + prim_offset]], origin, direction, t_min, t, uv)) {
                    hit = int(triangle_offset + prim_indices[left_first + i + prim_offset]);
                }
            }
        } else {
            if (!intersect_mnode(mbvh_nodes[bvh_offset + left_first], origin, dir_inverse, t, index, result))
            continue;
            for (int i = 3; i >= 0; i--) {
                const int idx = floatBitsToInt(index[i]) & 3;
                if (result[idx] && mbvh_nodes[bvh_offset + left_first].children[idx] >= 0) {
                    stack_ptr = stack_ptr + 1;
                    hit_stack[stack_ptr].left_first = mbvh_nodes[bvh_offset + left_first].children[idx];
                    hit_stack[stack_ptr].count = mbvh_nodes[bvh_offset + left_first].counts[idx];
                }
            }
        }
    }

    return hit;
}


ivec2 intersect_top_bvh(const vec3 origin, const vec3 direction, float t_min, inout float t, inout vec2 uv)
{
    uint hit_stack[64];
    hit_stack[0] = 0;
    int stack_ptr = 0;
    ivec2 hit = ivec2(-1);

    const vec3 dir_inverse = 1.0 / direction;
    while (stack_ptr >= 0) {
        const uint node_index = hit_stack[stack_ptr];
        stack_ptr = stack_ptr - 1;

        const int count = top_bvh_nodes[node_index].count;
        const int left_first = top_bvh_nodes[node_index].left_first;

        if (count >= 0) { // Leaf node
            for (int i = 0; i < count; i++)
            {
                uint inst_id = instance_indices[left_first + i];
                vec3 inst_org = (instances[inst_id].inverse * vec4(origin, 1)).xyz;
                vec3 inst_dir = (instances[inst_id].inverse * vec4(direction, 0)).xyz;
                int potential_hit = intersect_bvh(inst_org, inst_dir, instances[inst_id].bvh_offset, instances[inst_id].triangle_offset, instances[inst_id].prim_index_offset, t_min, t, uv);
                if (potential_hit >= 0) {
                    hit = ivec2(inst_id, potential_hit);
                }
            }
        } else if (left_first >= 0) { // Regular node
            float _ltmin, _ltmax;
            float _rtmin, _rtmax;
            bool hit_left = intersect_node(top_bvh_nodes[left_first], origin, dir_inverse, t, _rtmin, _rtmax);
            bool hit_right = intersect_node(top_bvh_nodes[left_first + 1], origin, dir_inverse, t, _rtmin, _rtmax);

            if (hit_left && hit_right) {
                if (_ltmin < _rtmin) {
                    stack_ptr += 1;
                    hit_stack[stack_ptr] = left_first + 1;
                    stack_ptr += 1;
                    hit_stack[stack_ptr] = left_first;
                } else {
                    stack_ptr += 1;
                    hit_stack[stack_ptr] = left_first;
                    stack_ptr += 1;
                    hit_stack[stack_ptr] = left_first + 1;
                }
            } else if (hit_left) {
                stack_ptr += 1;
                hit_stack[stack_ptr] = left_first;
            } else if (hit_right) {
                stack_ptr += 1;
                hit_stack[stack_ptr] = left_first + 1;
            }
        }
    }

    return hit;
}

ivec2 intersect_top_mbvh(const vec3 origin, const vec3 direction, float t_min, inout float t, inout vec2 uv)
{
    MBVHTraversal hit_stack[32];
    int stack_ptr = -1;
    ivec2 hit = ivec2(-1);

    const vec3 dir_inverse = 1.0 / direction;

    bvec4 result;
    vec4 index;

    if (!intersect_mnode(top_mbvh_nodes[0], origin, dir_inverse, t, index, result))
    return hit;
    for (int i = 3; i >= 0; i--) {
        const int idx = floatBitsToInt(index[i]) & 3;
        if (result[idx] && top_mbvh_nodes[0].children[idx] >= 0) {
            stack_ptr = stack_ptr + 1;
            hit_stack[stack_ptr].left_first = top_mbvh_nodes[0].children[idx];
            hit_stack[stack_ptr].count = top_mbvh_nodes[0].counts[idx];
        }
    }

    while (stack_ptr >= 0) {
        const int left_first = hit_stack[stack_ptr].left_first;
        const int count = hit_stack[stack_ptr].count;
        stack_ptr -= 1;

        if (count >= 0) { // Leaf node
            for (int i = 0; i < count; i++) {
                uint inst_id = instance_indices[left_first + i];
                vec3 inst_org = (instances[inst_id].inverse * vec4(origin, 1)).xyz;
                vec3 inst_dir = (instances[inst_id].inverse * vec4(direction, 0)).xyz;
                int potential_hit = intersect_mbvh(inst_org, inst_dir, instances[inst_id].mbvh_offset, instances[inst_id].triangle_offset, instances[inst_id].prim_index_offset, t_min, t, uv);
                if (potential_hit >= 0) {
                    hit = ivec2(inst_id, potential_hit);
                }
            }
        } else {
            if (!intersect_mnode(top_mbvh_nodes[left_first], origin, dir_inverse, t, index, result))
            continue;
            for (int i = 3; i >= 0; i--) {
                const int idx = floatBitsToInt(index[i]) & 3;
                if (result[idx] && top_mbvh_nodes[left_first].children[idx] >= 0) {
                    stack_ptr = stack_ptr + 1;
                    hit_stack[stack_ptr].left_first = top_mbvh_nodes[left_first].children[idx];
                    hit_stack[stack_ptr].count = top_mbvh_nodes[left_first].counts[idx];
                }
            }
        }
    }

    return hit;
}

void main() {
    uint job_id = gl_GlobalInvocationID.x;
    if (job_id >= camera.path_count) {
        return;
    }

    const uint offset = camera.width * camera.height;
    job_id = job_id + offset * (camera.path_length % 2);

    const vec4 O = states[job_id].origin;
    const vec4 D = states[job_id].direction;

    float t = 1e26;
    float t_min = 1e-4f;
    vec2 uv = vec2(0.0);

    #if USE_MBVH
    const ivec2 hit = intersect_top_mbvh(O.xyz, D.xyz, t_min, t, uv);
    #else
    const ivec2 hit = intersect_top_bvh(O.xyz, D.xyz, t_min, t, uv);
    #endif

    const uint bary = uint(65535.0f * uv.x) + (uint(65535.0f * uv.y) << 16);
    states[job_id].state = vec4(intBitsToFloat(hit.x), intBitsToFloat(hit.y), t, uintBitsToFloat(bary));
}